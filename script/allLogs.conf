#!/bin/bash
# Logstash 5.5.0 configuration files 

input {
  file {
    path => [

		## logs location for collections
        "${CRSLOG}/gipcd*.trc",
		"${CRSLOG}/alert*.log",
		"${CRSLOG}/ocssd*.trc",
        "${CRSLOG}/crsd???.trc",
		"${CRSLOG}/crsd??.trc",
		"${CRSLOG}/crsd.trc",
        "${CRSLOG}/ohasd_orarootagent_root*.trc"
		## logs location ends here

        ]


		## Support multiline merge according to timestamp
        codec => multiline {
                pattern => "^%{TIMESTAMP_ISO8601}"
				negate => true
                what => previous
        }
		## multiline module ends here

	## From begining to collect for logs
	## Remove data.path files and restart logstash if you want to re-collect all
    start_position => "beginning"
 }
}



filter{
	
	## Split multiline by \n as arrays in message
	if "multiline" in [tags] {
		ruby {
			code => "event.set('message', event.get('message').split(/\r?\n/))"
		}
	}
	####
	

	## alert 
	if "alert" in [path] {
		grok {
            patterns_dir => "./patterns"
			match => {
				"message" => [
					"%{TIMESTAMP_ISO8601:date} \[%{DATA}\(%{INT}\)\]%{DATA}: %{SENTENCE_TO_END:content}",
					"%{TIMESTAMP_ISO8601:date}[+ ]%{MESSID}:?%{SPACE}%{SENTENCE_TO_END:content}",
                    "%{TIMESTAMP_ISO8601:date}%{SPACE}",
					"^%{SPACE:content}$",
					"%{SPACE}%{SENTENCE_TO_END:content}"
					
				]
			}
        }
		mutate{
			replace => ["log_type", "alert"]
		}
	}
	####

	## gipcd
	if "gipcd" in [path] {
		grok {
			patterns_dir => "./patterns"
			match => {
				"message" => [
					"%{TIMESTAMP_ISO8601:date}%{SPACE}(:%{SPACE}%{WORD}:%{INT}%{SPACE}:)?%{SPACE}%{SENTENCE_TO_END:content}",
                    "%{TIMESTAMP_ISO8601:date}%{SPACE}",
					"%{SPACE}:?%{SPACE}%{WORD}:%{INT}%{SPACE}:%{SPACE}%{SENTENCE_TO_END:content}",
					"%{IGNORE:content}"
				]
			}
			
		}
		
		mutate{
			replace => ["log_type", "gipcd"]
		}
	}
	####

	## ocssd
	if "ocssd" in [path] {
		grok {
			patterns_dir => "./patterns"
			match => {
				"message" => [
					"%{TIMESTAMP_ISO8601:date}%{SPACE}(:%{SPACE}%{WORD}:%{INT}%{SPACE}:)?%{SPACE}%{SENTENCE_TO_END:content}",
                    "%{TIMESTAMP_ISO8601:date}%{SPACE}",
					"%{SPACE}:?%{SPACE}%{WORD}:%{INT}%{SPACE}:%{SPACE}%{SENTENCE_TO_END:content}",
					"%{IGNORE:content}"
				]
			}
			
		}
		
		mutate{
			replace => ["log_type", "ocssd"]
		}
	}
	####

	## ohasd_orarootagent_root
    if [path] =~ /.*ohasd_orarootagent_root.*.trc/ {
		grok {
			patterns_dir => "./patterns"
			match => {
				"message" => [
					"%{TIMESTAMP_ISO8601:date}%{SPACE}(:%{SPACE}%{WORD}:%{INT}%{SPACE}:)?(%{SPACE}%{QUTO})?(%{SPACE}\{%{INT}:%{INT}:%{INT}\}%{SPACE})*(%{SPACE}%{QUTO})?%{SPACE}(%{BRACKETQUOT})?%{SPACE}%{SENTENCE_TO_END:content}",
                    "%{TIMESTAMP_ISO8601:date}%{SPACE}",
					"(%{SPACE}%{WORD}:%{INT}:)?%{SPACE}%{SENTENCE_TO_END:content}",
					"%{IGNORE:content}"
				]
			}
			
		}
		
		mutate{
			replace => ["log_type", "ohasd_orarootagent_root"]
		}
	}
	####

	## crsd
    if [path] =~ /.*crsd(_[0-9]+)?.trc/ {
		grok {
			patterns_dir => "./patterns"
			match => {
				"message" => [
					"%{TIMESTAMP_ISO8601:date}%{SPACE}(:%{SPACE}%{WORD}:%{INT}%{SPACE}:)?(%{SPACE}\{%{INT}:%{INT}:%{INT}\}%{SPACE})*%{SPACE}(\.*)%{SENTENCE_TO_END:content}",
                    "%{TIMESTAMP_ISO8601:date}%{SPACE}",
					"(%{SPACE}%{WORD}:%{INT}:)?%{SPACE}%{SENTENCE_TO_END:content}",
					"%{IGNORE:content}"
				]
			}
			
		}
		
		mutate{
			replace => ["log_type", "crsd"]
		}
    }
	####

	## YYYY-MM-DD hh:mm:ss => YYYY-MM-DDThh:mm:ssZ
    date {
		match => [ "date", "ISO8601"]
		timezone => "+00:00"
    }
}


output {
    # if "alert" in [path] {
    #     elasticsearch  {
    #         hosts => ["10.208.149.207"]
    #         index => "alert"
    #     }
    # }
    # if "gipcd" in [path] {
    #     elasticsearch  {
    #         hosts => ["10.208.149.207"]
    #         index => "gipcd"
    #     }
    # }
    # if "ocssd" in [path] {
    #     elasticsearch  {
    #         hosts => ["10.208.149.207"]
    #         index => "ocssd"
    #     }
    # }
    # if [path] =~ /.*ohasd_orarootagent_root.*.trc/ {
    #     elasticsearch  {
    #         hosts => ["10.208.149.207"]
    #         index => "ohasagent" ## bugs here
    #     }
    # }
    # if [path] =~ /.*crsd(_[0-9]+)?.trc/ {
    #     elasticsearch  {
    #         hosts => ["10.208.149.207"]
    #         index => "crsd"
    #     }
    # }
	elasticsearch {
		hosts => ["10.208.149.207"]
		index => "crslogs"
	}

}
